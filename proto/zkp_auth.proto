syntax = "proto3";

package zkp_auth;

// Prover registers in the server sending:
// y1 = alpha^x mod p
// y2 = beta^x mod p
message RegisterRequest {
    string user = 1;
    bytes y1 = 2;
    bytes y2 = 3;
}

message RegisterResponse {

}

// Prover ask for challenge in the server sending:
// r1 = alpha^k mod p
// r2 = beta^k mod p
message AuthChallengeRequest {
    string user = 1;
    bytes r1 = 2;
    bytes r2 = 3;
}

// Verifier sends the challenge back
message AuthChallengeResponse {
    string auth_id = 1;
    bytes c = 2;
}

// Prover sends the solution to the challenge s = k - c * x
message AuthAnswerRequest {
    string auth_id = 1;
    bytes s = 2;
}

// Verifier sends the session ID if solution is correct
message AuthAnswerRensponse {
    string session_id = 1;
}

service Auth {
    rpc Register(RegisterRequest) returns (RegisterResponse) {}
    rpc CreateAuthChallenge(AuthChallengeRequest) returns (AuthChallengeResponse) {}
    rpc VerifyAuth(AuthAnswerRequest) returns (AuthAnswerRensponse) {}
}
